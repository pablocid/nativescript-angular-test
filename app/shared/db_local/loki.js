"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_system_1 = require("file-system");
var Loki = require("lokijs");
var LokiAdapter = require("loki-nativescript-adapter");
var Q = require("q");
var e5 = require('../../E5.json');
var schemas = require('../../schemas.json');
require('nativescript-async');
var Collection = (function () {
    function Collection(name) {
        this.name = name;
        this.dbPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "main.db");
        this.db = new Loki(this.dbPath, { adapter: new LokiAdapter(), indices: ['_id'], autoload: true });
    }
    Collection.LokiPromise = function () {
        var dbPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "main.db");
        var db = new Loki(dbPath, { adapter: new LokiAdapter(), indices: ['_id'], autoload: true, autosave: true });
        return new Promise(function (resolve, reject) {
            db.loadDatabase({}, function () {
                resolve(db);
            });
        });
    };
    Collection.getCollection = function (name) {
        var dbPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "main.db");
        var db = new Loki(dbPath, { adapter: new LokiAdapter(), indices: ['_id'], autoload: true, autosave: true });
        return new Promise(function (resolve, reject) {
            db.loadDatabase({}, function () {
                resolve(db.getCollection(name));
            });
        });
    };
    Collection.Loki = function () {
        var dbPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "main.db");
        return new Loki(dbPath, { adapter: new LokiAdapter(), indices: ['_id'], autoload: true, autosave: true });
    };
    Collection.setCollection = function (collectionName, docs) {
        return Collection.LokiPromise()
            .then(function (db) {
            if (db.getCollection(collectionName))
                return { collection: db.getCollection(collectionName), db: db };
            return { collection: db.addCollection(collectionName), db: db };
        })
            .then(function (x) {
            x.collection.removeDataOnly();
            x.db.saveDatabase();
            return x;
        })
            .then(function (x) {
            if (docs && Array.isArray(docs) && docs.length) {
                for (var i = 0; i < docs.length; i++) {
                    x.collection.insert(docs[i]);
                }
                x.db.saveDatabase();
                return true;
            }
            else {
                return false;
            }
        });
    };
    Collection.addToCollection = function (collectionName, docs) {
        return Collection.LokiPromise()
            .then(function (db) {
            if (db.getCollection(collectionName))
                return { collection: db.getCollection(collectionName), db: db };
            return { collection: db.addCollection(collectionName), db: db };
        })
            .then(function (x) {
            if (docs && Array.isArray(docs) && docs.length) {
                for (var i = 0; i < docs.length; i++) {
                    x.collection.insert(docs[i]);
                }
                x.db.saveDatabase();
                return true;
            }
            else {
                return false;
            }
        });
    };
    Collection.prototype.load = function () {
        var _this = this;
        var def = Q.defer();
        console.log('connecting to collection ...');
        this.db.loadDatabase({}, function () {
            // if (this.db.getCollection(this.name) === null) {
            //     console.log('creating collection !!!');
            //     def.resolve(this._create());
            // } else {
            def.resolve(_this.db);
            //}
        });
        return def.promise;
    };
    Collection.prototype.find = function (obj) {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (c) { return c.find(obj); });
    };
    Collection.prototype.findOneAndSave = function (obj) {
        var _this = this;
        return this.load()
            .then(function (x) {
            return {
                coll: x.getCollection(_this.name),
                db: x
            };
        })
            .then(function (c) {
            return {
                coll: c.coll.find(obj),
                db: c.db
            };
        });
    };
    Collection.prototype.raw = function () {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (c) { return c; });
    };
    Collection.prototype.findOne = function (obj) {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (c) { return c.findOne(obj); });
    };
    Collection.prototype.getById = function (_id) {
        return this.findOne({ _id: _id });
    };
    Collection.prototype.update = function (obj) {
        return this.raw().then(function (c) {
            c.update(obj);
        });
    };
    Collection.prototype.getFast = function () {
        var _this = this;
        return this.load()
            .then(function (x) {
            var a = x.getCollection(_this.name);
            a.ensureUniqueIndex('_id');
            return a;
        })
            .then(function (c) {
            return function (id) {
                return c.by('_id', id);
            };
        });
    };
    Collection.prototype.chain = function () {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (c) { return c.chain(); });
    };
    Collection.prototype.remove = function (id) {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (c) { return c.remove(id); });
    };
    Collection.prototype.loadData = function (values) {
        var data = this.db.addCollection(this.name);
        values.forEach(function (x) { return data.insert(x); });
        this.db.saveDatabase();
    };
    Collection.prototype.removeCollection = function () {
        var _this = this;
        return this.load()
            .then(function (x) { return x.getCollection(_this.name); })
            .then(function (x) {
            var s = _this.db.removeCollection(_this.name);
            _this.save();
            return s;
        });
    };
    Collection.prototype._create = function () {
        return this.db.addCollection(this.name);
    };
    Collection.prototype.save = function () {
        this.db.saveDatabase();
    };
    return Collection;
}());
exports.Collection = Collection;
/*
        var pz = path.join(knownFolders.currentApp().path, "database.db");
        var db = new Loki(pz, { adapter: new LokiAdapter() });

        //var espaldera = db.addCollection("espaldera");
        //e5.items.forEach(x => espaldera.insert(x));
        //db.saveDatabase();


        //console.log('movies.data', JSON.stringify(movies.data));
        console.log(Object.keys(db));
        console.log(db.filename, db.collections, db.verbose)


        db.loadDatabase({}, function () {
            var e = db.getCollection("espaldera");
            console.log(e);
            
            console.log(
                JSON.stringify(
                    e.chain()
                        .where(r => {
                            return r.attributes.some(s => s.id === '5807af9231f55d0010aaffe5' && s.number === 5);
                        })
                        //.limit(5)
                        .data()
                        .map(c => c.attributes.filter(r => {
                            if (r.id === '5807afe331f55d0010aaffe6') return true;
                            return false;
                        }))
                        .map(x => x[0].number).sort((a, b) => a - b)
                )
            );
            
        });
        */ 
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9raS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxva2kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBeUU7QUFDekUsNkJBQWdDO0FBQ2hDLHVEQUF5RDtBQUN6RCxxQkFBdUI7QUFHdkIsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3BDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzlDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBRzlCO0lBcUZJLG9CQUFZLElBQVk7UUFFcEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBSSxDQUFDLElBQUksQ0FBQywwQkFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksSUFBSSxDQUFXLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxXQUFXLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBdkZhLHNCQUFXLEdBQXpCO1FBQ0ksSUFBTSxNQUFNLEdBQUcsa0JBQUksQ0FBQyxJQUFJLENBQUMsMEJBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDcEUsSUFBTSxFQUFFLEdBQWEsSUFBSSxJQUFJLENBQVcsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUVsSSxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFB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TSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQWQsQ0FBYyxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRU0scUNBQWdCLEdBQXZCO1FBQUEsaUJBUUM7UUFQRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTthQUNiLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxFQUExQixDQUEwQixDQUFDO2FBQ3JDLElBQUksQ0FBQyxVQUFBLENBQUM7WUFDSCxJQUFJLENBQUMsR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM1QyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDWixNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRU8sNEJBQU8sR0FBZjtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVNLHlCQUFJLEdBQVg7UUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTCxpQkFBQztBQUFELENBQUMsQUE3TUQsSUE2TUM7QUE3TVksZ0NBQVU7QUE4TXZCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQW1DVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhdGggYXMgUGF0aCwga25vd25Gb2xkZXJzIGFzIEtub3duRm9sZGVycyB9IGZyb20gJ2ZpbGUtc3lzdGVtJztcbmltcG9ydCBMb2tpID0gcmVxdWlyZSgnbG9raWpzJyk7XG5pbXBvcnQgKiBhcyBMb2tpQWRhcHRlciBmcm9tICdsb2tpLW5hdGl2ZXNjcmlwdC1hZGFwdGVyJztcbmltcG9ydCAqIGFzIFEgZnJvbSAncSc7XG5pbXBvcnQgeyBMb2tpRmFjZSwgTG9raUNoYWluLCBMb2tpQ29sbGVjdGlvbiB9IGZyb20gJy4vbG9raS5pbnRlcmZhY2VzJztcblxuY29uc3QgZTUgPSByZXF1aXJlKCcuLi8uLi9FNS5qc29uJyk7XG5jb25zdCBzY2hlbWFzID0gcmVxdWlyZSgnLi4vLi4vc2NoZW1hcy5qc29uJyk7XG5yZXF1aXJlKCduYXRpdmVzY3JpcHQtYXN5bmMnKTtcblxuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiB7XG5cblxuICAgIHB1YmxpYyBzdGF0aWMgTG9raVByb21pc2UoKTogUHJvbWlzZTxMb2tpRmFjZT4ge1xuICAgICAgICBjb25zdCBkYlBhdGggPSBQYXRoLmpvaW4oS25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCBcIm1haW4uZGJcIik7XG4gICAgICAgIGNvbnN0IGRiOiBMb2tpRmFjZSA9IG5ldyBMb2tpPExva2lGYWNlPihkYlBhdGgsIHsgYWRhcHRlcjogbmV3IExva2lBZGFwdGVyKCksIGluZGljZXM6IFsnX2lkJ10sIGF1dG9sb2FkOiB0cnVlLCBhdXRvc2F2ZTogdHJ1ZSB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZGIubG9hZERhdGFiYXNlKHt9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYik7XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldENvbGxlY3Rpb24obmFtZTogc3RyaW5nKTogUHJvbWlzZTxMb2tpQ29sbGVjdGlvbj4ge1xuICAgICAgICBjb25zdCBkYlBhdGggPSBQYXRoLmpvaW4oS25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCBcIm1haW4uZGJcIik7XG4gICAgICAgIGNvbnN0IGRiOiBMb2tpRmFjZSA9IG5ldyBMb2tpPExva2lGYWNlPihkYlBhdGgsIHsgYWRhcHRlcjogbmV3IExva2lBZGFwdGVyKCksIGluZGljZXM6IFsnX2lkJ10sIGF1dG9sb2FkOiB0cnVlLCBhdXRvc2F2ZTogdHJ1ZSB9KTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgZGIubG9hZERhdGFiYXNlKHt9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShkYi5nZXRDb2xsZWN0aW9uKG5hbWUpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgTG9raSgpIHtcbiAgICAgICAgY29uc3QgZGJQYXRoID0gUGF0aC5qb2luKEtub3duRm9sZGVycy5jdXJyZW50QXBwKCkucGF0aCwgXCJtYWluLmRiXCIpO1xuICAgICAgICByZXR1cm4gbmV3IExva2k8TG9raUZhY2U+KGRiUGF0aCwgeyBhZGFwdGVyOiBuZXcgTG9raUFkYXB0ZXIoKSwgaW5kaWNlczogWydfaWQnXSwgYXV0b2xvYWQ6IHRydWUsIGF1dG9zYXZlOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgc2V0Q29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZTogc3RyaW5nLCBkb2NzOiBhbnlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXG4gICAgICAgIHJldHVybiBDb2xsZWN0aW9uLkxva2lQcm9taXNlKClcbiAgICAgICAgICAgIC50aGVuKGRiID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGIuZ2V0Q29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSkpIHJldHVybiB7IGNvbGxlY3Rpb246IGRiLmdldENvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUpLCBkYiB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29sbGVjdGlvbjogZGIuYWRkQ29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSksIGRiIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgeC5jb2xsZWN0aW9uLnJlbW92ZURhdGFPbmx5KCk7XG4gICAgICAgICAgICAgICAgeC5kYi5zYXZlRGF0YWJhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbih4ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jcyAmJiBBcnJheS5pc0FycmF5KGRvY3MpICYmIGRvY3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5jb2xsZWN0aW9uLmluc2VydChkb2NzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB4LmRiLnNhdmVEYXRhYmFzZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGFkZFRvQ29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZTogc3RyaW5nLCBkb2NzOiBhbnlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXG4gICAgICAgIHJldHVybiBDb2xsZWN0aW9uLkxva2lQcm9taXNlKClcbiAgICAgICAgICAgIC50aGVuKGRiID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGIuZ2V0Q29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSkpIHJldHVybiB7IGNvbGxlY3Rpb246IGRiLmdldENvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWUpLCBkYiB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgY29sbGVjdGlvbjogZGIuYWRkQ29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSksIGRiIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3MgJiYgQXJyYXkuaXNBcnJheShkb2NzKSAmJiBkb2NzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHguY29sbGVjdGlvbi5pbnNlcnQoZG9jc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeC5kYi5zYXZlRGF0YWJhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIG5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIGNvbGw6IGFueTtcbiAgICBwdWJsaWMgZGJQYXRoOiBzdHJpbmc7XG4gICAgcHVibGljIGRiOiBMb2tpRmFjZTtcbiAgICBwdWJsaWMgbG9hZGVkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nKSB7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kYlBhdGggPSBQYXRoLmpvaW4oS25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCBcIm1haW4uZGJcIik7XG4gICAgICAgIHRoaXMuZGIgPSBuZXcgTG9raTxMb2tpRmFjZT4odGhpcy5kYlBhdGgsIHsgYWRhcHRlcjogbmV3IExva2lBZGFwdGVyKCksIGluZGljZXM6IFsnX2lkJ10sIGF1dG9sb2FkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZCgpOiBRLlByb21pc2U8YW55PiB7XG4gICAgICAgIGNvbnN0IGRlZiA9IFEuZGVmZXIoKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnY29ubmVjdGluZyB0byBjb2xsZWN0aW9uIC4uLicpO1xuICAgICAgICB0aGlzLmRiLmxvYWREYXRhYmFzZSh7fSwgKCkgPT4ge1xuXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5kYi5nZXRDb2xsZWN0aW9uKHRoaXMubmFtZSkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vICAgICBjb25zb2xlLmxvZygnY3JlYXRpbmcgY29sbGVjdGlvbiAhISEnKTtcbiAgICAgICAgICAgIC8vICAgICBkZWYucmVzb2x2ZSh0aGlzLl9jcmVhdGUoKSk7XG4gICAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmLnJlc29sdmUodGhpcy5kYik7XG4gICAgICAgICAgICAvL31cbiAgICAgICAgfSk7XG5cblxuICAgICAgICByZXR1cm4gZGVmLnByb21pc2U7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgZmluZChvYmo/OiBPYmplY3QpOiBRLlByb21pc2U8YW55W10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZCgpXG4gICAgICAgICAgICAudGhlbih4ID0+IHguZ2V0Q29sbGVjdGlvbih0aGlzLm5hbWUpKVxuICAgICAgICAgICAgLnRoZW4oKGM6IExva2lDb2xsZWN0aW9uKSA9PiBjLmZpbmQob2JqKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGZpbmRPbmVBbmRTYXZlKG9iaj86IGFueSk6IFEuUHJvbWlzZTx7IGNvbGw6IGFueSwgZGI6IGFueSB9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWQoKVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbDogeC5nZXRDb2xsZWN0aW9uKHRoaXMubmFtZSksXG4gICAgICAgICAgICAgICAgICAgIGRiOiB4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChjOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBjb2xsOiBjLmNvbGwuZmluZChvYmopLFxuICAgICAgICAgICAgICAgICAgICBkYjogYy5kYlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyByYXcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWQoKVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB4LmdldENvbGxlY3Rpb24odGhpcy5uYW1lKSlcbiAgICAgICAgICAgIC50aGVuKChjOiBMb2tpQ29sbGVjdGlvbikgPT4gYyk7XG4gICAgfVxuXG4gICAgcHVibGljIGZpbmRPbmUob2JqPzogYW55KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWQoKVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB4LmdldENvbGxlY3Rpb24odGhpcy5uYW1lKSlcbiAgICAgICAgICAgIC50aGVuKChjOiBMb2tpQ29sbGVjdGlvbikgPT4gYy5maW5kT25lKG9iaikpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRCeUlkKF9pZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRPbmUoeyBfaWQgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZShvYmo6IGFueSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYXcoKS50aGVuKGMgPT4ge1xuICAgICAgICAgICAgYy51cGRhdGUob2JqKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEZhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWQoKVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHguZ2V0Q29sbGVjdGlvbih0aGlzLm5hbWUpO1xuICAgICAgICAgICAgICAgIGEuZW5zdXJlVW5pcXVlSW5kZXgoJ19pZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKChjOiBMb2tpQ29sbGVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5ieSgnX2lkJywgaWQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoYWluKCk6IFEuUHJvbWlzZTxMb2tpQ2hhaW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZCgpXG4gICAgICAgICAgICAudGhlbih4ID0+IHguZ2V0Q29sbGVjdGlvbih0aGlzLm5hbWUpKVxuICAgICAgICAgICAgLnRoZW4oKGM6IExva2lDb2xsZWN0aW9uKSA9PiBjLmNoYWluKCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmUoaWQ/OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZCgpXG4gICAgICAgICAgICAudGhlbih4ID0+IHguZ2V0Q29sbGVjdGlvbih0aGlzLm5hbWUpKVxuICAgICAgICAgICAgLnRoZW4oKGM6IExva2lDb2xsZWN0aW9uKSA9PiBjLnJlbW92ZShpZCkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2FkRGF0YSh2YWx1ZXM6IGFueVtdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRiLmFkZENvbGxlY3Rpb24odGhpcy5uYW1lKTtcbiAgICAgICAgdmFsdWVzLmZvckVhY2goeCA9PiBkYXRhLmluc2VydCh4KSk7XG4gICAgICAgIHRoaXMuZGIuc2F2ZURhdGFiYXNlKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUNvbGxlY3Rpb24oKTogUS5Qcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZCgpXG4gICAgICAgICAgICAudGhlbih4ID0+IHguZ2V0Q29sbGVjdGlvbih0aGlzLm5hbWUpKVxuICAgICAgICAgICAgLnRoZW4oeCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHMgPSB0aGlzLmRiLnJlbW92ZUNvbGxlY3Rpb24odGhpcy5uYW1lKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2NyZWF0ZSgpOiBMb2tpQ29sbGVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRiLmFkZENvbGxlY3Rpb24odGhpcy5uYW1lKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2F2ZSgpIHtcbiAgICAgICAgdGhpcy5kYi5zYXZlRGF0YWJhc2UoKTtcbiAgICB9XG5cbn1cbi8qXG4gICAgICAgIHZhciBweiA9IHBhdGguam9pbihrbm93bkZvbGRlcnMuY3VycmVudEFwcCgpLnBhdGgsIFwiZGF0YWJhc2UuZGJcIik7XG4gICAgICAgIHZhciBkYiA9IG5ldyBMb2tpKHB6LCB7IGFkYXB0ZXI6IG5ldyBMb2tpQWRhcHRlcigpIH0pO1xuXG4gICAgICAgIC8vdmFyIGVzcGFsZGVyYSA9IGRiLmFkZENvbGxlY3Rpb24oXCJlc3BhbGRlcmFcIik7XG4gICAgICAgIC8vZTUuaXRlbXMuZm9yRWFjaCh4ID0+IGVzcGFsZGVyYS5pbnNlcnQoeCkpO1xuICAgICAgICAvL2RiLnNhdmVEYXRhYmFzZSgpO1xuXG5cbiAgICAgICAgLy9jb25zb2xlLmxvZygnbW92aWVzLmRhdGEnLCBKU09OLnN0cmluZ2lmeShtb3ZpZXMuZGF0YSkpO1xuICAgICAgICBjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhkYikpO1xuICAgICAgICBjb25zb2xlLmxvZyhkYi5maWxlbmFtZSwgZGIuY29sbGVjdGlvbnMsIGRiLnZlcmJvc2UpXG5cblxuICAgICAgICBkYi5sb2FkRGF0YWJhc2Uoe30sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gZGIuZ2V0Q29sbGVjdGlvbihcImVzcGFsZGVyYVwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgICAgZS5jaGFpbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAud2hlcmUociA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuYXR0cmlidXRlcy5zb21lKHMgPT4gcy5pZCA9PT0gJzU4MDdhZjkyMzFmNTVkMDAxMGFhZmZlNScgJiYgcy5udW1iZXIgPT09IDUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vLmxpbWl0KDUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGMgPT4gYy5hdHRyaWJ1dGVzLmZpbHRlcihyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5pZCA9PT0gJzU4MDdhZmUzMzFmNTVkMDAxMGFhZmZlNicpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCh4ID0+IHhbMF0ubnVtYmVyKS5zb3J0KChhLCBiKSA9PiBhIC0gYilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgXG4gICAgICAgIH0pO1xuICAgICAgICAqLyJdfQ==