"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Sqlite = require('nativescript-sqlite');
var LocalDB = (function () {
    function LocalDB(tablename) {
        this.tablename = tablename;
        this._setTable();
    }
    LocalDB.prototype._setTable = function () {
        var _this = this;
        this.db = (new Sqlite("database.db"))
            .then(function (db) {
            return db.execSQL("\n                    CREATE TABLE IF NOT EXISTS " + _this.tablename + " \n                        (\n                            _id varchar(255) PRIMARY KEY ,\n                            schm TEXT,\n                            created TEXT,\n                            updated TEXT ,\n                            attributes JSON,\n                            date NUMERIC\n                        )\n                ")
                .then(function (id) { return db; })
                .catch(function (err) { throw err; });
        })
            .catch(function (err) { throw err; });
    };
    LocalDB.prototype.findOne = function (id) {
        var _this = this;
        return this.db
            .then(function (db) { return db.get("SELECT * FROM " + _this.tablename + " WHERE _id = '" + id + "'"); })
            .then(function (row) {
            if (row)
                return _this._parseRow(row);
            return row;
        });
    };
    LocalDB.prototype.insert = function (value, updated) {
        var _this = this;
        var doc = this._stringifyRow(value);
        return this.db.then(function (db) {
            if (!value)
                return null;
            return db.execSQL("\n                INSERT INTO " + _this.tablename + " VALUES ('" + doc[0] + "','" + doc[1] + "','" + doc[2] + "','" + doc[3] + "','" + doc[4] + "'," + (updated | doc[5]) + ");\n                ", function (err, id) {
                if (err)
                    console.log('ERROR EN INSERTAR', err);
                console.log('el id es' + id);
            });
        });
    };
    LocalDB.prototype.remove = function (id) {
        var _this = this;
        return this.db
            .then(function (db) { return db.get("DELETE FROM " + _this.tablename + " WHERE _id = '" + id + "'"); });
    };
    LocalDB.prototype.dropTable = function () {
        var _this = this;
        return this.db
            .then(function (db) { return db.get("DROP TABLE " + _this.tablename); });
    };
    LocalDB.prototype.createTable = function () {
        this._setTable();
    };
    LocalDB.prototype.removeAll = function () {
        var _this = this;
        return this.db
            .then(function (db) { return db.get("DELETE FROM " + _this.tablename); });
    };
    LocalDB.prototype.addItem = function (name) {
        var _this = this;
        var id = Math.ceil(Math.random() * 10000);
        var _id = "HKJHKADSF923F" + id;
        var schm = "HKJHKADSF923FLLJD987987";
        var created = '2017-06-01T02:50:39.581Z';
        var updated = JSON.stringify([{ "user": "lkajslk2342", "date": "2017-06-01T02:50:39.581Z" }]);
        var attributes = JSON.stringify([{ "id": "laksdjlK234B", "string": "planta" }, { "id": "OOIjlkla3234", "number": 5 }, { "id": "UYUY89987979", "number": 12 }, { "id": "QEEWE6666GDG", "number": 123 }]);
        return this.db.then(function (db) {
            return db.execSQL("\n                INSERT INTO " + _this.tablename + " VALUES ('" + _id + "','" + schm + "','" + created + "','" + updated + "','" + attributes + "'," + (new Date().getTime()) + ");\n                ")
                .catch(function (e) { console.log(e); });
        });
    };
    LocalDB.prototype.getItems = function () {
        var _this = this;
        return this.db.then(function (db) { return db.all("SELECT * FROM " + _this.tablename); });
    };
    LocalDB.prototype.find = function () {
        var _this = this;
        return this.db.then(function (db) { return db.all("SELECT * FROM " + _this.tablename); })
            .then(function (rows) {
            return rows.map(function (x) { return _this._parseRow(x); });
        })
            .catch(function (e) { console.log(e); });
    };
    LocalDB.prototype._parseRow = function (row) {
        return {
            _id: row[0],
            schm: row[1],
            created: row[2],
            updated: JSON.parse(row[3]),
            attributes: JSON.parse(row[4])
        };
    };
    LocalDB.prototype._stringifyRow = function (value) {
        return [
            value._id,
            value.schm,
            value.created,
            JSON.stringify(value.updated),
            JSON.stringify(value.attributes),
            (new Date().getTime())
        ];
    };
    return LocalDB;
}());
exports.LocalDB = LocalDB;
//# sourceMappingURL=data:application/json;base64,