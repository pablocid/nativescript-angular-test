"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var file_system_1 = require("file-system");
var Loki = require("lokijs");
var LokiAdapter = require("loki-nativescript-adapter");
//const desync = require('deasync');
var CollectionDB = (function () {
    function CollectionDB() {
        this.dbPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "main.db");
        this.db = new Loki(this.dbPath, { adapter: new LokiAdapter(), indices: ['_id'], autoload: true });
    }
    CollectionDB.prototype.getDb = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.db.getCollection('schemas')) {
                resolve(_this.db);
            }
            else {
                _this.db.loadDatabase({}, function () {
                    resolve(_this.db);
                });
            }
        });
    };
    CollectionDB.prototype.getCollection = function (name) {
        return this.getDb().then(function (db) { return db.getCollection(name); });
    };
    CollectionDB.prototype.setCollection = function (name, data) {
        console.log(name);
        return this.getDb().then(function (db) {
            console.log('Loaded db', name);
            if (data && Array.isArray(data)) {
                var collection = void 0;
                if (db.getCollection(name)) {
                    collection = db.getCollection(name);
                    collection.removeDataOnly();
                }
                else {
                    collection = db.addCollection(name);
                }
                for (var i = 0; i < data.length; i++) {
                    collection.insert(data[i]);
                }
                db.saveDatabase();
                return true;
            }
            return false;
        });
    };
    CollectionDB.prototype.removeCollection = function (name) {
        return this.getDb().then(function (db) {
            db.removeCollection(name);
            db.saveDatabase();
            return true;
        });
    };
    return CollectionDB;
}());
CollectionDB = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [])
], CollectionDB);
exports.CollectionDB = CollectionDB;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbkRiLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29sbGVjdGlvbkRiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBRzNDLDJDQUF5RTtBQUN6RSw2QkFBZ0M7QUFDaEMsdURBQXlEO0FBSXpELG9DQUFvQztBQUdwQyxJQUFhLFlBQVk7SUFLckI7UUFDSSxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFJLENBQUMsSUFBSSxDQUFDLDBCQUFZLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3RHLENBQUM7SUFFRCw0QkFBSyxHQUFMO1FBQUEsaUJBVUM7UUFURyxNQUFNLENBQUMsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtZQUMvQixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ25DLE9BQU8sQ0FBQyxLQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLEtBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRTtvQkFDckIsT0FBTyxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtnQkFDcEIsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQsb0NBQWEsR0FBYixVQUFjLElBQVk7UUFDdEIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUE7SUFDMUQsQ0FBQztJQUVELG9DQUFhLEdBQWIsVUFBYyxJQUFZLEVBQUUsSUFBVztRQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzlCLElBQUksVUFBVSxTQUFnQixDQUFDO2dCQUMvQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsVUFBVSxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3BDLFVBQVUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztnQkFDaEMsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDSixVQUFVLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEMsQ0FBQztnQkFFRCxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDbkMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFDRCxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsQ0FBQztZQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsdUNBQWdCLEdBQWhCLFVBQWlCLElBQVk7UUFDekIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQ3ZCLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDbEIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFJTCxtQkFBQztBQUFELENBQUMsQUEzREQsSUEyREM7QUEzRFksWUFBWTtJQUR4QixpQkFBVSxFQUFFOztHQUNBLFlBQVksQ0EyRHhCO0FBM0RZLG9DQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGxhbnQgfSBmcm9tICcuLi9yZWNvcmQnO1xuaW1wb3J0IHsgTG9raUZhY2UsIExva2lDaGFpbiwgTG9raUNvbGxlY3Rpb24gfSBmcm9tICcuLi9kYl9sb2NhbC9sb2tpLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgcGF0aCBhcyBQYXRoLCBrbm93bkZvbGRlcnMgYXMgS25vd25Gb2xkZXJzIH0gZnJvbSAnZmlsZS1zeXN0ZW0nO1xuaW1wb3J0IExva2kgPSByZXF1aXJlKCdsb2tpanMnKTtcbmltcG9ydCAqIGFzIExva2lBZGFwdGVyIGZyb20gJ2xva2ktbmF0aXZlc2NyaXB0LWFkYXB0ZXInO1xuaW1wb3J0ICogYXMgUSBmcm9tICdxJ1xuXG5cbi8vY29uc3QgZGVzeW5jID0gcmVxdWlyZSgnZGVhc3luYycpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbkRCIHtcblxuICAgIHB1YmxpYyBkYlBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgZGI6IExva2lGYWNlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZGJQYXRoID0gUGF0aC5qb2luKEtub3duRm9sZGVycy5jdXJyZW50QXBwKCkucGF0aCwgXCJtYWluLmRiXCIpO1xuICAgICAgICB0aGlzLmRiID0gbmV3IExva2kodGhpcy5kYlBhdGgsIHsgYWRhcHRlcjogbmV3IExva2lBZGFwdGVyKCksIGluZGljZXM6IFsnX2lkJ10sIGF1dG9sb2FkOiB0cnVlIH0pO1xuICAgIH1cblxuICAgIGdldERiKCk6IFByb21pc2U8TG9raUZhY2U+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRiLmdldENvbGxlY3Rpb24oJ3NjaGVtYXMnKSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5kYik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZGIubG9hZERhdGFiYXNlKHt9LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGhpcy5kYilcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBnZXRDb2xsZWN0aW9uKG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREYigpLnRoZW4oZGIgPT4gZGIuZ2V0Q29sbGVjdGlvbihuYW1lKSlcbiAgICB9XG5cbiAgICBzZXRDb2xsZWN0aW9uKG5hbWU6IHN0cmluZywgZGF0YTogYW55W10pIHtcbiAgICAgICAgY29uc29sZS5sb2cobmFtZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERiKCkudGhlbihkYiA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnTG9hZGVkIGRiJywgbmFtZSk7XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb246IExva2lDb2xsZWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChkYi5nZXRDb2xsZWN0aW9uKG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBkYi5nZXRDb2xsZWN0aW9uKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uLnJlbW92ZURhdGFPbmx5KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IGRiLmFkZENvbGxlY3Rpb24obmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24uaW5zZXJ0KGRhdGFbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYi5zYXZlRGF0YWJhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ29sbGVjdGlvbihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGIoKS50aGVuKGRiID0+IHtcbiAgICAgICAgICAgIGRiLnJlbW92ZUNvbGxlY3Rpb24obmFtZSk7XG4gICAgICAgICAgICBkYi5zYXZlRGF0YWJhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9XG5cblxuXG59Il19