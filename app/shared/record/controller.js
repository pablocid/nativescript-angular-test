"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var _1 = require("./");
var RecordController = (function () {
    function RecordController(collection) {
        // if (
        //     collection &&
        //     collection === 'espaldera' ||
        //     collection === 'records' ||
        //     collection === 'plantas'
        // ) {
        // }
        this._dbPlants = _1.Collection.getCollection('espaldera');
        this._dbSchm = _1.Collection.getCollection('schema');
    }
    RecordController.prototype.getPlant = function (_id) {
        var _this = this;
        return this._dbPlants
            .then(function (db) {
            return db.findOne({ _id: _id });
        })
            .then(function (x) {
            return _this._getSchema(x.schm)
                .then(function (z) {
                return { schema: z.schema, attrs: z.attrSchms, raw: x };
            });
        })
            .then(function (x) { return _this._setPlant(x.schema, x.attrs, x.raw); });
    };
    RecordController.prototype._setPlant = function (schema, attrSchms, raw) {
        var r = new _1.Plant();
        if (!raw)
            return r;
        var keys = Object.keys(raw);
        if (keys.indexOf('_id') === -1 ||
            keys.indexOf('schm') === -1 ||
            keys.indexOf('created') === -1 ||
            keys.indexOf('updated') === -1 ||
            keys.indexOf('updated') === -1) {
            console.log(' El raw object no tiene alguna de estas keys ["_id", "schm", "attributes", "updated", "created"]');
            return r;
        }
        r.id = raw._id;
        r.schema = schema;
        r.setCreateISOString(raw.created);
        r.setUpdated(raw.updated);
        r.attributes = attrSchms
            .map(function (a) { return new _1.Attribute(a, lodash_1.find(raw.attributes, { id: a.id }), r.reference); });
        return r;
    };
    RecordController.prototype._getSchema = function (_id) {
        return this._dbSchm
            .then(function (db) {
            var schema = new _1.Schema(db.findOne({ _id: _id }));
            var listAttr = schema.getAttr('attributes', 'list');
            if (!listAttr || !Array.isArray(listAttr) || !listAttr.length)
                return { schema: schema, attrSchms: [] };
            var attrSchms = listAttr.map(function (x) { return db.findOne({ _id: x }); })
                .filter(function (x) { return x.type === 'attribute'; })
                .map(function (x) { return new _1.AttributeSchm(x); })
                .map(function (x) {
                var i = x.getAttr('input', 'reference');
                x.input = new _1.InputSchm(db.findOne({ _id: i }));
                return x;
            });
            return { schema: schema, attrSchms: attrSchms };
        });
    };
    RecordController.prototype._getSchm = function (_id, db, raw) {
        var schema = new _1.Schema(db.findOne({ _id: _id }));
        var listAttr = schema.getAttr('attributes', 'list');
        if (!listAttr || !Array.isArray(listAttr) || !listAttr.length)
            return { schema: schema, attrSchms: [], raw: raw };
        var attrSchms = listAttr.map(function (x) { return db.findOne({ _id: x }); })
            .filter(function (x) { return x.type === 'attribute'; })
            .map(function (x) { return new _1.AttributeSchm(x); })
            .map(function (x) {
            var i = x.getAttr('input', 'reference');
            x.input = new _1.InputSchm(db.findOne({ _id: i }));
            return x;
        });
        return { schema: schema, attrSchms: attrSchms, raw: raw };
    };
    RecordController.prototype.getRow = function (espaldera, hilera) {
        var _this = this;
        return this._dbPlants
            .then(function (db) {
            return _this._dbSchm.then(function (x) {
                return { dbPlants: db, dbSchm: x };
            });
        })
            .then(function (dbs) {
            return {
                plants: dbs.dbPlants.find({ schm: '57a4e02ec830e2bdff1a1608' })
                    .filter(function (x) {
                    return x.attributes.some(function (x) { return x.id === '5807af5f31f55d0010aaffe4' && x.number === espaldera; }) &&
                        x.attributes.some(function (x) { return x.id === '5807af9231f55d0010aaffe5' && x.number === hilera; });
                }), dbSchm: dbs.dbSchm
            };
        })
            .then(function (dbs) { return dbs.plants.map(function (x) { return _this._getSchm(x.schm, dbs.dbSchm, x); }); })
            .then(function (p) { return p.map(function (x) { return _this._setPlant(x.schema, x.attrSchms, x.raw); }); });
    };
    return RecordController;
}());
exports.RecordController = RecordController;
//# sourceMappingURL=data:application/json;base64,